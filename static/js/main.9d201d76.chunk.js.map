{"version":3,"sources":["components/CitySelectionForm/CitySelectionForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["CitySelectionForm","useState","inputValue","setInputValue","name","city","setCity","handleApiCall","a","url","fetch","then","response","status","Error","returnedResponse","json","data","catch","error","console","log","className","onSubmit","e","preventDefault","onChange","event","target","value","style","marginRight","type","placeholder","required","onClick","main","Math","round","temp","weather","humidity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA8EeA,EA3EW,WAExB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAS,CAC/BG,KAAM,KADR,mBAAOC,EAAP,KAAaC,EAAb,KAKMC,EAAa,uCAAG,4BAAAC,EAAA,6DAChBC,EADgB,4DAC2CP,EAD3C,oDAEdQ,MAAMD,GACTE,MAAK,SAACC,GACL,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC9C,MAAM,IAAIC,MAAM,4BAElB,OAAOF,KAERD,MAAK,SAACI,GAELA,EAAiBC,OAAOL,MAAK,SAACM,GAC5BX,EAAQW,SAGXC,OAAM,SAACC,GAENC,QAAQC,IAAIF,MAjBI,2CAAH,qDAqBnB,OACE,sBAAKG,UAAU,gBAAf,UACE,6CACA,uBACEA,UAAU,OACVC,SAAU,SAACC,GACTA,EAAEC,iBACFlB,IACAJ,EAAc,KALlB,UAQE,uBACEuB,SAAU,SAACC,GAAD,OAAWxB,EAAcwB,EAAMC,OAAOC,QAChDC,MAAO,CAAEC,YAAa,QACtBT,UAAU,QACVU,KAAK,OACLC,YAAY,oBACZC,UAAQ,IAEV,wBAAQC,QAAS5B,EAAjB,uBAEF,+BACE,0BAASe,UAAS,oBAAejB,EAAK+B,KAAO,SAAW,IAAxD,UACE,gCACG,IACD,6BAAK/B,EAAKD,MAAL,iCAAuCC,EAAKD,KAA5C,QACL,+BACG,IACAC,EAAKD,MAAL,UAAgBiC,KAAKC,MAAMjC,EAAK+B,KAAKG,KAAO,QAA5C,UAA0D,UAG/D,gCACG,IACD,4BACGlC,EAAKmC,QAAL,gCAC4BnC,EAAKmC,QAAQ,GAAGJ,MACzC,KAEN,4BAAI/B,EAAK+B,KAAL,qBAA0B/B,EAAK+B,KAAKK,SAApC,KAAkD,iBC5DnDC,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCOSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9d201d76.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./CitySelectionForm.css\";\r\n\r\nconst CitySelectionForm = () => {\r\n  //STATE\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [city, setCity] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  //FUNCTIONS\r\n  const handleApiCall = async () => {\r\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=7e20b6d5b2041f6e18663c44faa5c27b`;\r\n    await fetch(url)\r\n      .then((response) => {\r\n        if (response.status >= 400 && response.status < 600) {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n        return response;\r\n      })\r\n      .then((returnedResponse) => {\r\n        // Your response to manipulate\r\n        returnedResponse.json().then((data) => {\r\n          setCity(data);\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // Your error is here!\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"citySelection\">\r\n      <h1>Weather App</h1>\r\n      <form\r\n        className=\"form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          handleApiCall();\r\n          setInputValue(\"\");\r\n        }}\r\n      >\r\n        <input\r\n          onChange={(event) => setInputValue(event.target.value)}\r\n          style={{ marginRight: \"1rem\" }}\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"type desired city\"\r\n          required\r\n        ></input>\r\n        <button onClick={handleApiCall}>Search</button>\r\n      </form>\r\n      <main>\r\n        <section className={`more-info ${city.main ? \"active\" : \"\"}`}>\r\n          <div>\r\n            {\" \"}\r\n            <h2>{city.name && `Current temperature in ${city.name}: `}</h2>\r\n            <h1>\r\n              {\" \"}\r\n              {city.name && `${Math.round(city.main.temp - 273.15)} Â°C`}{\" \"}\r\n            </h1>\r\n          </div>\r\n          <div>\r\n            {\" \"}\r\n            <p>\r\n              {city.weather\r\n                ? `Current weather is  : ${city.weather[0].main}`\r\n                : \"\"}\r\n            </p>\r\n            <p>{city.main ? `Humidity : ${city.main.humidity}%` : \"\"}</p>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CitySelectionForm;\r\n","import \"./App.css\";\nimport CitySelectionForm from \"./components/CitySelectionForm/CitySelectionForm\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CitySelectionForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}